openapi: '3.0.3'
info:
  title: baragym-backend
  version: 0.0.1
  description: Backend da aplicação BaraGym.
servers:
  - url: 'https://baragym-backend.herokuapp.com/api/v1'
  - url: 'http://localhost:8080/api/v1'
tags:
  - name: autenticacao
    description: Serviços de autenticação de usuário.
  - name: monitoring
    description: Verificação de status e métricas da aplicação.
  - name: usuario
    description: Serviços de criação e pesquisa de usuário.
paths:
  /actuator/health:
    get:
      tags:
        - monitoring
      summary: Status da aplicação
      security:
        - bearerAuthToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '401':
          description: Unauthorized (Este endpoint necessita de token de acesso com perfil `ADMIN`)
        '403':
          description: Forbidden (Este endpoint necessita de token de acesso com perfil `ADMIN`)
        '500':
          description: Erro interno
  /login:
    post:
      tags:
        - autenticacao
      summary: Gera um token de acesso
      requestBody:
        description: Corpo da requisição de login de acesso
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '500':
          description: Erro interno
  /usuarios:
    post:
      tags:
        - usuario
      summary: Cria um usuário
      description: Cria um usuário a partir do nome, email e senha.
      security:
        - bearerAuthToken: []
      requestBody:
        description: Corpo da requisição de criação do usuário
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsuarioRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
    get:
      tags:
        - usuario
      summary: Obtém todos os usuários
      description: |
        Apenas administradores (`ADMIN`).
      security:
        - bearerAuthToken: []
      parameters:
        - name: page
          in: query
          description: | 
            Número de página solicitado. <br/>
            **Atenção: os números de página inciam em `0`.**
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: size
          in: query
          description: Tamanho máximo da página de dados retornada.
          required: false
          schema:
            type: integer
            example: 20
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioPageResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
  /usuarios/{matricula}:
    get:
      tags:
        - usuario
      summary: Obtém um usuário por matrícula
      description: |
        Apenas o próprio usuário tem acesso ou um administrador (`ADMIN`).
      security:
        - bearerAuthToken: []
      parameters:
        - name: matricula
          in: path
          description: Matrícula do usuário
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
components:
  securitySchemes:
    bearerAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token de acesso à aplicação.

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: 'UP'
          description: 'Status do serviço.'
        components:
          type: array
          items:
            type: object
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: '500'
          description: 'Status HTTP da resposta'
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: 'Bearer eyJhbGciOiJIUzI1NiJ9...'
          description: 'Token de acesso'
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: 'joao@teste.com'
          description: 'Email de acesso'
        senha:
          type: string
          example: '12345'
          description: 'Senha de acesso'
    
    SortResponse:
      type: object
      properties:
        empty:
          type: boolean
          example: true
          description: Verifica se a lista está vazia ou não.
        sorted:
          type: boolean
          example: false
          description: Verifica se a lista está ordenada ou não.
        unsorted:
          type: boolean
          example: true
          description: Verifica se a lista está fora de ordenação ou não.
    PageableResponse:
      type: object
      properties:
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
         $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.
    CreateUsuarioRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome do usuário
          example: 'João'
        email:
          type: string
          description: Email do usuário
          example: 'joao@gmail.com'
        senha:
          type: string
          description: Senha do usuário
          example: '12345'
    UsuarioResponse:
      type: object
      properties:
        nome:
          type: string
          description: Nome do usuário
          example: 'João'
        email:
          type: string
          description: Email do usuário
          example: 'joao@gmail.com'
        matricula:
          type: string
          description: Senha do usuário
          example: '78041'
    UsuarioPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UsuarioResponse'
        pageable:
          type: object
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
         $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.