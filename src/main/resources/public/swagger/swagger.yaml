openapi: '3.0.3'
info:
  title: baragym-backend
  version: 0.0.1
  description: Backend da aplicação BaraGym.
servers:
  - url: 'https://baragym-backend.herokuapp.com/api/v1'
  - url: 'http://localhost:8080/api/v1'
tags:
  - name: autenticacao
    description: Serviços de autenticação de usuário.
  - name: monitoracao
    description: Verificação de status e métricas da aplicação.
  - name: usuario
    description: Serviços de criação e pesquisa de usuário.
  - name: turma
    description: |
      Serviços de criação e pesquisa de turma. <br/>
      **Apenas usuários com perfil `ADMIN`.**
  - name: atividade
    description: |
      Serviços de criação e pesquisa de atividade.
  - name: alocacao
    description: |
      Serviços de criação e pesquisa de alocacao.
  - name: agendamento
    description: |
      Serviços de criação e pesquisa de agendamento.
paths:
  /actuator/health:
    get:
      tags:
        - monitoracao
      summary: Status da aplicação
      security:
        - bearerAuthToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '401':
          description: Unauthorized (Este endpoint necessita de token de acesso com perfil `ADMIN`)
        '403':
          description: Forbidden (Este endpoint necessita de token de acesso com perfil `ADMIN`)
        '500':
          description: Erro interno


  ######################
  ###### LOGIN #########
  ######################
  /login:
    post:
      tags:
        - autenticacao
      summary: Gera um token de acesso
      requestBody:
        description: Corpo da requisição de login de acesso
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '500':
          description: Erro interno

  ######################
  ###### USUARIO #######
  ######################        
  /usuarios:
    post:
      tags:
        - usuario
      summary: Cria um usuário
      description: Cria um usuário a partir do nome, email e senha.
      security:
        - bearerAuthToken: [ ]
      requestBody:
        description: Corpo da requisição de criação do usuário
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsuarioRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
    get:
      tags:
        - usuario
      summary: Obtém todos os usuários
      description: |
        Apenas administradores (`ADMIN`).
      security:
        - bearerAuthToken: []
      parameters:
        - name: page
          in: query
          description: | 
            Número de página solicitado. <br/>
            **Atenção: os números de página inciam em `0`.**
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: size
          in: query
          description: Tamanho máximo da página de dados retornada.
          required: false
          schema:
            type: integer
            example: 20
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioPageResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
  /usuarios/{matricula}:
    get:
      tags:
        - usuario
      summary: Obtém um usuário por matrícula
      description: |
        Apenas o próprio usuário tem acesso ou um administrador (`ADMIN`).
      security:
        - bearerAuthToken: []
      parameters:
        - name: matricula
          in: path
          description: Matrícula do usuário
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno

  ######################
  #### AGENDAMENTO #####
  ######################
  /usuarios/{matricula}/agendamentos/{agendamentoId}:
    delete:
      tags:
        - agendamento
      summary: Deleta um agendamento
      description: |
        Apenas o próprio usuário tem acesso ou um administrador (`ADMIN`).
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: matricula
          in: path
          description: Matrícula do usuário
          required: true
          schema:
            type: string
        - name: agendamentoId
          in: path
          description: Identificador unico do agendamento
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
  /usuarios/{matricula}/agendamentos:
    post:
      tags:
        - agendamento
      summary: Agenda um usuário em uma determinada alocacao
      description: |
        Apenas o próprio usuário tem acesso ou um administrador (`ADMIN`).
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: matricula
          in: path
          description: Matrícula do usuário
          required: true
          schema:
            type: string
      requestBody:
        description: Corpo da requisição de cadastro de um agendamento
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsuarioAgendamentoRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioAgendamentoResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
    get:
      tags:
        - agendamento
      summary: Obtém agendamentos do usuário
      description: |
        Apenas o próprio usuário tem acesso ou um administrador (`ADMIN`).
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: matricula
          in: path
          description: Matrícula do usuário
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Número de página solicitado. <br/>
            **Atenção: os números de página inciam em `0`.**
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: size
          in: query
          description: Tamanho máximo da página de dados retornada.
          required: false
          schema:
            type: integer
            example: 20
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioAgendamentoPageResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno

  ######################
  ###### TURMA #########
  ######################
  /turmas:
    post:
      tags:
        - turma
      summary: Cria uma turma
      description: Cria uma turma a partir do nome e capacidade.
      security:
        - bearerAuthToken: [ ]
      requestBody:
        description: Corpo da requisição de criação de turma
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTurmaRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurmaResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
    get:
      tags:
        - turma
      summary: Obtém todas as turmas
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: page
          in: query
          description: |
            Número de página solicitado. <br/>
            **Atenção: os números de página inciam em `0`.**
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: size
          in: query
          description: Tamanho máximo da página de dados retornada.
          required: false
          schema:
            type: integer
            example: 20
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TurmaPageResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno

  
  ######################
  ##### ATIVIDADE ######
  ######################
  /atividades:
    post:
      tags:
        - atividade
      summary: Cria uma atividade
      description: Cria uma atividade a partir do nome, descricao e valor por dia.
      security:
        - bearerAuthToken: [ ]
      requestBody:
        description: Corpo da requisição de criação de atividade
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAtividadeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtividadeResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
    get:
      tags:
        - atividade
      summary: Obtém todas as atividades
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: page
          in: query
          description: |
            Número de página solicitado. <br/>
            **Atenção: os números de página inciam em `0`.**
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: size
          in: query
          description: Tamanho máximo da página de dados retornada.
          required: false
          schema:
            type: integer
            example: 20
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtividadePageResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
  /usuarios/{matricula}/atividades:
    post:
      tags:
        - atividade
      summary: Cadastra um determinado usuário em atividades
      description: |
        Apenas o próprio usuário tem acesso ou um administrador (`ADMIN`).
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: matricula
          in: path
          description: Matrícula do usuário
          required: true
          schema:
            type: string
      requestBody:
        description: Corpo da requisição de cadastro de um usuário em atividades
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsuarioAtividadeRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
    get:
      tags:
        - atividade
      summary: Obtém as atividades cadastradas pelo usuário
      description: |
        Apenas o próprio usuário tem acesso ou um administrador (`ADMIN`).
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: matricula
          in: path
          description: Matrícula do usuário
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsuarioAtividadeResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno

  ######################
  ###### ALOCACAO ######
  ######################
  /alocacoes:
    post:
      tags:
        - alocacao
      summary: Cria uma alocacao
      description: |
        Cria uma nova alocacao. Baseado na turma, atividade e dia da semana.
      security:
        - bearerAuthToken: [ ]
      requestBody:
        description: Corpo da requisição de criação de alocacao.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlocacaoRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
    get:
      tags:
        - alocacao
      summary: Obtém todas as alocacoes
      description: Apenas administradores (`ADMIN`).
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: page
          in: query
          description: |
            Número de página solicitado. <br/>
            **Atenção: os números de página inciam em `0`.**
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: size
          in: query
          description: Tamanho máximo da página de dados retornada.
          required: false
          schema:
            type: integer
            example: 20
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlocacaoPageResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
  /atividades/{atividadeId}/alocacoes:
    get:
      tags:
        - alocacao
      summary: Obtém as alocações de determinada atividade
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: atividadeId
          in: path
          description: Identificador da atividade
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Número de página solicitado. <br/>
            **Atenção: os números de página inciam em `0`.**
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: size
          in: query
          description: Tamanho máximo da página de dados retornada.
          required: false
          schema:
            type: integer
            example: 20
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlocacaoPageResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno
  /usuarios/{matricula}/atividades/{usuarioAtividadeId}/alocacoes:
    get:
      tags:
        - alocacao
      summary: |
        Obtem, a partir das atividades cadastradas do usuário, suas alocacoes e se possui agendamentos
      description: |
        Apenas o próprio usuário tem acesso ou um administrador (`ADMIN`).
      security:
        - bearerAuthToken: [ ]
      parameters:
        - name: matricula
          in: path
          description: Matrícula do usuário
          required: true
          schema:
            type: string
        - name: usuarioAtividadeId
          in: path
          description: Identificador único do cadastro do usuário em uma determinada atividade
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Número de página solicitado. <br/>
            **Atenção: os números de página inciam em `0`.**
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: size
          in: query
          description: Tamanho máximo da página de dados retornada.
          required: false
          schema:
            type: integer
            example: 20
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioAlocacaoAgendamentoPageResponse'
        '400':
          description: Bad request. Falha na validação dos dados de entrada ou violação de regras de negócio.
        '401':
          description: Unauthorized. Retornado quando a requisição não envia as credenciais necessárias para identificação e autorização.
        '403':
          description: Forbidden. As credenciais fornecidas são insuficientes para realizar esta operação.
        '500':
          description: Erro interno


components:
  securitySchemes:
    bearerAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token de acesso à aplicação.

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: 'UP'
          description: 'Status do serviço.'
        components:
          type: array
          items:
            type: object
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: '500'
          description: 'Status HTTP da resposta'
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: 'Bearer eyJhbGciOiJIUzI1NiJ9...'
          description: 'Token de acesso'
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: 'joao@teste.com'
          description: 'Email de acesso'
        senha:
          type: string
          example: '12345'
          description: 'Senha de acesso'
    
    SortResponse:
      type: object
      properties:
        empty:
          type: boolean
          example: true
          description: Verifica se a lista está vazia ou não.
        sorted:
          type: boolean
          example: false
          description: Verifica se a lista está ordenada ou não.
        unsorted:
          type: boolean
          example: true
          description: Verifica se a lista está fora de ordenação ou não.
    PageableResponse:
      type: object
      properties:
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
         $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.

    CreateUsuarioRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome do usuário
          example: 'João'
        email:
          type: string
          description: Email do usuário
          example: 'joao@gmail.com'
        senha:
          type: string
          description: Senha do usuário
          example: '12345'
    UsuarioResponse:
      type: object
      properties:
        nome:
          type: string
          description: Nome do usuário
          example: 'João'
        email:
          type: string
          description: Email do usuário
          example: 'joao@gmail.com'
        matricula:
          type: string
          description: Senha do usuário
          example: '78041'
    UsuarioPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UsuarioResponse'
        pageable:
          type: object
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
          $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.

    CreateAtividadePorUsuarioRequest:
      type: object
      properties:
        atividadeId:
          type: number
          description: Identificador único da atividade
          example: 1
        quantidadeSemana:
          type: number
          description: Quantidade de vezes na semana (valor entre 1 e 6)
          example: 5
    CreateUsuarioAtividadeRequest:
      type: object
      properties:
        atividades:
          type: array
          description: Atividades a serem cadastradas
          items:
            $ref: '#/components/schemas/CreateAtividadePorUsuarioRequest'
        valorTotal:
          type: number
          description: Valor total de todas as atividades a serem cadastradas
          example: 345.44
    UsuarioAtividadeResponse:
      type: object
      properties:
        id:
          type: number
          description: Identificador único da atividade do usuário (UsuarioAtividade)
          example: 3
        atividadeId:
          type: number
          description: Identificador único da atividade
          example: 1
        nomeAtividade:
          type: string
          description: Nome da atividade
          example: 'Boxe'
        quantidadeSemana:
          type: number
          description: Quantidade de vezes na semana
          example: 5
        vigenciaInicio:
          type: string
          description: Data de início da vigência do plano (em UTC)
          example: '2022-06-02T16:00:54.102+00:00'
        vigenciaFim:
          type: string
          description: Data de término da vigência do plano (em UTC), D+30 da data `vigenciaInicio`
          example: '2022-07-02T16:00:54.102+00:00'
    CreateUsuarioAgendamentoRequest:
      type: object
      properties:
        alocacaoId:
          type: number
          description: Identificador único da alocacao
    UsuarioAgendamentoResponse:
      type: object
      properties:
        id:
          type: number
          description: Identificador único do agendamento
          example: 1
        alocacaoId:
          type: number
          description: Identificador único da alocacao
          example: 3
        nomeAtividade:
          type: string
          description: Nome da atividade da alocacao
          example: 'Boxe'
        nomeDiaSemana:
          type: string
          description: Dia da semana da alocacao
          example: 'Terça-feira'
        nomeTurma:
          type: string
          description: Nome da turma/sala da alocacao
          example: 'Sala 1'
        horaInicio:
          type: string
          description: Horário de início da alocacao
          example: '10:00'
        horaFim:
          type: string
          description: Horário de término da alocacao
          example: '15:00'
    UsuarioAgendamentoPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UsuarioAgendamentoResponse'
        pageable:
          type: object
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
          $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.
    UsuarioAlocacaoAgendamentoResponse:
      type: object
      properties:
        agendamentoId:
          type: number
          description: Identificador único do agendamento
          example: 1
        alocacaoId:
          type: number
          description: Identificador único da alocacao
          example: 3
        nomeAtividade:
          type: string
          description: Nome da atividade da alocacao
          example: 'Boxe'
        nomeDiaSemana:
          type: string
          description: Dia da semana da alocacao
          example: 'Terça-feira'
        nomeTurma:
          type: string
          description: Nome da turma/sala da alocacao
          example: 'Sala 1'
        horaInicio:
          type: string
          description: Horário de início da alocacao
          example: '10:00'
        horaFim:
          type: string
          description: Horário de término da alocacao
          example: '15:00'
        estaAgendado:
          type: boolean
          description: |
            Verifica se esta alocacao possui um agendamento prévio, 
            caso seja verdade, o campo `agendamentoId` também virá preenchido.
          example: true
    UsuarioAlocacaoAgendamentoPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UsuarioAlocacaoAgendamentoResponse'
        pageable:
          type: object
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
          $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.
    CreateTurmaRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome da turma
          example: 'Sala 1'
        capacidade:
          type: number
          description: Capacidade da turma (pessoas)
          example: 10
    TurmaResponse:
      type: object
      properties:
        id:
          type: number
          description: identificador único da turma
          example: 12
        nome:
          type: string
          description: Nome da turma
          example: 'Sala 1'
        capacidade:
          type: number
          description: Capacidade da turma (pessoas)
          example: 10
    TurmaPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TurmaResponse'
        pageable:
          type: object
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
          $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.

    CreateAtividadeRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome da atividade
          example: 'Boxe'
        descricao:
          type: string
          description: Descricao da atividade
          example: 'Muito bom para quem quer queimar gordura...'
        valorDia:
          type: number
          description: Valor por dia da atividade
          example: 50.99
    AtividadeResponse:
      type: object
      properties:
        id:
          type: number
          description: identificador único da atividade
          example: 12
        nome:
          type: string
          description: Nome da atividade
          example: 'Boxe'
        descricao:
          type: string
          description: Descricao da atividade
          example: 'Muito bom para quem quer queimar gordura...'
        valorDia:
          type: number
          description: Valor por dia da atividade
          example: 50.99
    AtividadePageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AtividadeResponse'
        pageable:
          type: object
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
          $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.

    CreateAlocacaoRequest:
      type: object
      properties:
        turmaId:
          type: number
          description: Identificador único da turma
          example: 12
        atividadeId:
          type: number
          description: Identificador único da atividade
          example: 3
        diaSemanaId:
          type: number
          description: Identificador único do dia da semana
          example: 4
        horaInicio:
          type: string
          description: Horário de início da alocação
          example: '15:00'
        horaFim:
          type: string
          description: Horário de fim da alocação
          example: '17:00'
    AlocacaoResponse:
      type: object
      properties:
        id:
          type: number
          description: identificador único da alocacao
          example: 12
        nomeAtividade:
          type: string
          description: nome da atividade da alocacao
          example: 'Spinning'
        nomeDiaSemana:
          type: string
          description: nome do dia da semana da alocacao
          example: 'Terça-feira'
        nomeTurma:
          type: string
          description: nome da turma/sala da alocacao
          example: 'Turma 1'
        horaInicio:
          type: string
          description: Horário de início da alocacao
          example: '15:00'
        horaFim:
          type: string
          description: Horário de término da alocacao
          example: '17:00'
    AlocacaoPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AlocacaoResponse'
        pageable:
          type: object
        last:
          type: boolean
          example: false
          description: Verifica se é a última página.
        totalElements:
          type: number
          example: 5
          description: Número de elementos totais.
        totalPages:
          type: number
          example: 5
          description: Número de páginas totais.
        size:
          type: number
          example: 1
          description: Número de elementos por página.
        number:
          type: number
          example: 0
          description: Número de da página.
        sort:
          $ref: '#/components/schemas/SortResponse'
        first:
          type: boolean
          example: true
          description: Verifica se é a primeira página.
        numberOfElements:
          type: number
          example: 5
          description: Número de elementos totais.
        empty:
          type: boolean
          example: false
          description: Verifica se a lista está vazia ou não.